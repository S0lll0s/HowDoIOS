; boot.dasm: main entry point and bootstrap
;
; This file is part of HowDoIOS.
; Visit our git repo at https://github.com/S0lll0s/HowDoIOS
;  Copyright (C) 2013 S0lll0s

:_main
	IAS _interrupt_handler
	IAQ 1 ; turn on interrupt queueing so our setup doesn't get disrupted
	; _tasking_next_slice will disable it again later on, so we don't need to care about that
	
	; TODO: hardware enumeration like this:
	; loop through all hardware
		; if clock && no system clock yet
			; system clock = clock
			; setup interrupts
		; elseif driver present
			; init driver instance
		; else
			; store in list of unknown hardware
	; this can't be done until drivers are done, so for now this will have to do:
	HWN Z
:.hardware_loop
	SUB Z, 1
	HWQ Z
	IFE A, 0xb402
		IFE B, 0x12d0
			SET PC, .hardware_clock
	IFE Z, 0
		SET PC, .hardware_done
	SET PC, .hardware_loop
:.hardware_clock
	SET A, 2
	SET B, 0xffff
	HWI Z ; set cycle_slice interrupt (0xffff) on clock
	
	SET A, 0
	SET B, 1
	HWI Z ; set clock rate to 60Hz (maximum)  Do it this late to prevent task switces before we are done here
:.hardware_done
	; launch first task
	SET A, 0x10 ; process info = 16 words
	SET B, 0xffff ; proc id
	JSR _mem_alloc_memory
	IFE A, 0 ; failed to allocate memory
		SET PC, .error
	SET [_tasking_num_tasks], 1
	SET [_tasking_current_pid], 0xffff
	SET [_tasking_current_task], A
	
	; set the registers, assume everything else is zero
	SET [A], 0xffff ; pid
	SET [A+1], A ; task list is cyclic
	SET [A+0xa], _bootloader  ; PC = ???
	SET [A+0xe], 1  ; OS flag
	
	SET X, A ; backup the task info
	
	SET A, 0x40 ; 64 words of stack is enough... hopefully
	SET B, 0xffff
	JSR _mem_alloc_memory
	IFE A, 0 ; failed to allocate memory
		SET PC, .error
	ADD A, 0x3f ; go to the end of the stack memory
	SET [X+0xb], A ; set SP
	
	SET A, X
	SET PC, _tasking_load_only ; jump straight to the loading

:.error
	SUB PC, 1

#include 'bootloader.dasm'
#include 'api.dasm'
#include 'handler.dasm'
