; bootloader.dasm: hardware enumeration and driver distribution
;
; This file is part of HowDoIOS.
; Visit our git repo at https://github.com/S0lll0s/HowDoIOS
;  Copyright (C) 2013 S0lll0s

:_bootloader
	HWN Z
:.hardware_loop
	SUB Z, 1
	HWQ Z
	IFE A, 0xf615 ; lem1802
	 IFE B, 0x7349
	  IFE [_bootloader_hardware], 0xffff
		SET [_bootloader_hardware], Z
	IFE A, 0x7406
	 IFE B, 0x30cf ; keyboard
	  IFE [_bootloader_hardware+1], 0xffff
		SET [_bootloader_hardware+1], Z
	IFE A, 0x24c5
	 IFE B, 0x4fd5 ; m35fd
	  IFE [_bootloader_hardware+2], 0xffff
		SET [_bootloader_hardware+2], Z
	IFN Z, 0
		SET PC, .hardware_loop
	
	IFN [_bootloader_hardware], 0xffff
	 IFN [_bootloader_hardware+1], 0xffff
	  IFN [_bootloader_hardware+2], 0xffff ; at least one device of each kind
	  	SET PC, .got_all
	SUB PC, 1 ; error
:.got_all
	SET A, 0x183
	INT MEM_ALLOC
	
	SET I, A ; I = screen
	
	SET A, 0 ; map screen
	SET B, I ; to X
	HWI [_bootloader_hardware]
	
	HWN A
	MUL A, 2
	INT MEM_ALLOC ; alloc 2*(num hw)
	
	SET J, A ; J = hw list
	
	HWN Z
:.enum_loop
	SUB Z, 1
	HWQ Z
	
	SET C, Z
	MUL C, 0x2
	ADD C, J
	SET [C], 0
	SET [C+1], 0
	
	SET C, Z
	MUL C, 0x20
	ADD C, I
	SET [C], 0xf030
	SET [C+1], 0xf078
	ADD C, 2
	
	SET PUSH, A
	SET PUSH, C
	SET A, B ; B first
	SET B, C
	JSR _print_hex
	
	SET B, POP
	ADD B, 4
	SET A, POP
	JSR _print_hex
	IFN Z, 0
		SET PC, .enum_loop
	
	JSR _wait_floppy

; read floppy header	
	SET Y, .header_buf ; to memory at a
	SET A, 2 ; read
	SET X, 0 ; from sector 0
	HWI [_bootloader_hardware+2] ; go!
	
	JSR _wait_floppy

; display UI
	SET X, 0
	SET Z, 1
	SET PC, .print_driver
	
 ; poll keyboard
:.key_loop
	SET A, 1
	HWI [_bootloader_hardware+1]
	IFE C, 0x80
		SET PC, .up
	IFE C, 0x81
		SET PC, .down
	IFE C, 0x82
		SET PC, .left
	IFE C, 0x83
		SET PC, .right
	
	IFN C, 0x11 ; not return
		SET PC, .key_loop
	
; load & launch drivers
	HWN Z
:.load_loop
	SUB Z, 1
	
	SET C, Z
	MUL C, 0x2
	ADD C, J ; get driver id ([C])
	IFE [C], 0 ; no driver set
		SET PC, .load_loop

	JSR _wait_floppy
	SET A, 2
	SET Y, [.sector_buf]
	SET X, [C]
	HWI [_bootloader_hardware+2] ; load driver into buffer
	JSR _wait_floppy
	
	SET A, .sector_buf ; source
	SET B, X
	ADD B, .header_buf
	SET B, [B] ; A driver info
	ADD B, .header_buf
	SET B, [B] ; driver size
	; INT DRIVER_LOAD ; create a new process
	
	; call the init hook
	
	IFN Z, 0
		SET PC, .load_loop
	SUB PC, 1
	
	; open shell
	
; exit
	INT PROC_EXIT
	
:.up
	IFE X, 0
		SET PC, .key_loop
	SET C, X
	SUB X, 1
	SET PC, .cleanup_driver
	
:.down
	HWN A
	SUB A, 1
	IFE X, A
		SET PC, .key_loop
	SET C, X
	ADD X, 1
:.cleanup_driver
	SET Z, X
	MUL Z, 2 ; find driver index in driver/pid list
	ADD Z, J
	SET Z, [Z]
	MUL C, 0x20
	ADD C, I
	ADD C, 0xc
	SET [C], 0x0000 ; delete <
	ADD C, 0x13
	SET [C], 0x0000 ; delete >
	SET PC, .print_driver

:.left
	IFE Z, 0
		SET PC, .key_loop
	SUB Z, 1
	SET PC, .print_driver
	
:.right
	IFE Z, [Y]
		SET PC, .key_loop
	ADD Z, 1
:.print_driver
	SET A, X
	MUL A, 2 ; find driver index in driver/pid list
	ADD A, J
	SET [A], Z
	SET A, _name_clear
	SET B, 0xf000
	SET C, X
	MUL C, 0x20
	ADD C, I
	ADD C, 0xc
	SET PUSH, C
	SET PUSH, C
	JSR _scr_packed_string ; clear
	
	SET A, Y
	ADD A, Z ; pointer to driver info
	SET A, [A]
	ADD A, Y
	ADD A, 1
	SET B, 0xf000
	SET C, POP ; restore cursor
	ADD C, 1
	JSR _scr_packed_string ; print driver name
	
	SET C, POP
	SET [C], 0xf03c ; print <
	ADD C, 0x13
	SET [C], 0xf03e ; print >
	
	SET PC, .key_loop

:.header_buf
.reserve 0x200

:.sector_buf
.reserve 0x200


:_wait_floppy
	SET A, 0
	HWI [_bootloader_hardware+2] ; poll floppy
	IFN B, 0x1 ; STATE_READY
		SET PC, _wait_floppy
	SET PC, POP

:_print_hex
	SET PUSH, X
	SET X, B
	SET C, 0
:.loop
	SET B, A
	SHL B, C ; move to the left
	AND B, 0xf000 ; only leftmost 4 bits
	SHR B, 12
	ADD B, 0x30 ; num -> ascii
	IFG B, 0x39 ; not a digit
		ADD B, 7 ; move to alphabet
	BOR B, 0xf000 ; format
	SET [X], B
	ADD X, 1 ; move to next pos
	ADD C, 4 ; next one please!
	IFN C, 0x10
		SET PC, .loop
	SET X, POP
	SET PC, POP

:_scr_packed_string
	SET PUSH, X

:_scr_packed_string_loop
	SET X, [A]	; high byte
	SHR X, 8    ; shift high byte to low one
	AND X, 0x7f ; clear high

	IFE X, 0
		SET PC, _scr_packed_string_done

	BOR X, B    ; apply format
	SET [C], X
	ADD C, 1

	SET X, [A]  ; low byte
    AND X, 0x7f ; clear our high byte
  
    IFE X, 0
		SET PC, _scr_packed_string_done

	BOR X, B    ; apply format
	SET [C], X
	ADD C, 1

	ADD A, 1

	SET PC, _scr_packed_string_loop
:_scr_packed_string_done
	SET X, POP
	SET PC, POP

:_bootloader_hardware
	dat 0xffff ; lem1802
	dat 0xffff ; keyboard
	dat 0xffff ; floppy
	
:_name_clear
	dat 0x2020, 0x2020, 0x2020, 0x2020, 0x2020, 0x2020, 0x2020, 0x2020, 0x2020, 0x2000