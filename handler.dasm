; handler.dasm: main interrupt handler and syscall management
;
; This file is part of HowDoIOS.
; Visit our git repo at https://github.com/S0lll0s/HowDoIOS
;  Copyright (C) 2013 S0lll0s

; IA should always point here. This fires all processes hooks and does the slice switching
:_interrupt_handler
	SET PUSH, EX ; EX will change when using ADD / SUB etc, so we need to back it up
	IFE A, 0xffff ; clock / next slice
		SET PC, _tasking_next_slice

	IFG A, 0x0fff ; definiteley a syscall, we can modify A, B and C registers
		SET PC, _interrupt_handle_syscall
	
	SET PUSH, A
	SET A, [_tasking_current_task] ; current process thread info
	SET [A+4], B		; save B register
	SET [A+5], C		; save C register
	SET A, POP			; restore interrupt message
	
	; if claimed by single process
		; push PC and A, set PC to process' IA
	; else
		; go through hardware handler list
		; notify all registered processes (push PC and set PC to handler addr)

	SET C, [_tasking_current_task] ; current process thread info
	SET B, [C+4]	; restore B
	SET C, [C+5]	; restore C itself
	SET EX, POP
	RFI 0			; restore A and jump back

:_interrupt_handle_syscall
	SET PUSH, B ; save parameter B
	SET B, _api_routines
:.loop
	IFE A, [B] ; gotcha
		SET PC, .call
	IFE B, _api_rountines_end
		SET PC, .unknown
	ADD B, 2
	SET PC, .loop
:.unknown
	SET B, POP ; pop parameter B (not actually needed)
	SET EX, POP ; POP the EX register for everything but slice changes
	SET PEEK, 0 ; return 0 (error)
	RFI 0
	
:.call
	; SET A, POP
	; SET EX, POP
	; SET PC, [B+1]
	
	SET B, [B+1]
	XOR B, PEEK ; swap B (routine)...
	XOR PEEK, B ; ...and [SP] (parameter B)
	XOR B, PEEK 
	IFE PEEK, _tasking_next_slice
		SET PC, POP ; leave EX on the stack for _tasking_next_slice
	XOR [SP], [SP+1] ; swap [SP] (routine)...
	XOR [SP+1], [SP] ; ...and the EX register...
	XOR [SP], [SP+1] ; ...so we can..
	ADD SP, 1 ; ...pop EX and then...
	SET PC, POP	; ...jump to the rountine

:_api_routines
	; OS
	dat 0xf000, _os_version
	dat 0xf001, _os_shutdown
	
	; PROC
	dat 0xf010, _proc_exit
	dat 0xf011, _proc_getid
	dat 0xf012, _proc_fork
	dat 0xf013, _proc_kill
	dat 0xf014, _proc_exec
	dat 0xf015, _tasking_next_slice ; _proc_skip is directly mapped to _tasking_next_slice
	
	; IO
	dat 0xf020, _puts
	dat 0xf021, _gets
	dat 0xf022, _fopen
	dat 0xf023, _fclose
	dat 0xf024, _fputs
	dat 0xf025, _fgets
	dat 0xf026, _fgetsn
	dat 0xf027, _fseek
	dat 0xf028, _fpos
	dat 0xf029, _fwrite
	dat 0xf02a, _fread
	
	; UTILS
	dat 0xf030, _memset
	dat 0xf031, _memcpy
	dat 0xf032, _strcmp
	
	; HW
	dat 0xf040, _claim_hardware
	dat 0xf041, _release_hardware
	dat 0xf042, _register_interrupt
	dat 0xf043, _remove_interrupt
	
	; MSG
	dat 0xf050, _msg_poll
	dat 0xf051, _msg_send
	
	; MEM management
	dat 0xf060, _mem_alloc
	dat 0xf061, _mem_free
:_api_rountines_end

#include 'syscalls/hw.dasm'
#include 'syscalls/io.dasm'
#include 'syscalls/mem.dasm'
#include 'syscalls/msg.dasm'
#include 'syscalls/os.dasm'
#include 'syscalls/proc.dasm'
#include 'syscalls/utils.dasm'
#include 'tasking.dasm'
